  async function emoteLookup(emote) {
    if(emote.length == 0) {
      return {
        success: false,
        reply: 'Please provide an emote or emote code/id to look up.'
      }
    }
    else {
      let isEmoteID = (/^\d+$/.test(emote)) || (/emotesv2_[a-z0-9]{32}/.test(emote))
      try { 
        let emoteData = await axios.get(`https://api.ivr.fi/v2/twitch/emotes/${emote}?id=${isEmoteID}`)
        return {
          success: true,
          reply: emoteData.data
        }
      }
      catch(err) {
        return {
          success: false,
          reply: 'There was an error getting the data for that emote!'
        }
      }
    }
  }

  if (command === 'weit' || command === 'whatemoteisit') {
    emoteLookup(args[0]).then(function(emoteData) {
      if(emoteData.success && emoteData.reply.emoteType === 'GLOBALS') {
        client.me(channel, `${user} --> The emote "${emoteData.reply.emoteCode}" (ID: ${emoteData.reply.emoteID}) is a ${emoteData.reply.emoteAssetType.toLowerCase()} Global Twitch emote. Emote Link: ${emoteData.reply.emoteURL.replace('dark/1.0', 'dark/4.0')}`)
      }
      else if(emoteData.success && emoteData.reply.emoteType === 'SUBSCRIPTIONS') {
        client.me(channel, `${user} --> The emote "${emoteData.reply.emoteCode}" (ID: ${emoteData.reply.emoteID}) is a ${emoteData.reply.emoteAssetType.toLowerCase()} Tier ${emoteData.reply.emoteTier} sub emote to the channel @${emoteData.reply.channelLogin}. Emote Link: ${emoteData.reply.emoteURL.replace('dark/1.0', 'dark/4.0')}`)
      }
      else {
        client.me(channel, `${user} --> ${emoteData.reply}`)
      }
    })
  }

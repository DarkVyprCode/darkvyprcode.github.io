  async function getWeatherUser(name) {
    let userLocation = await db.get(`${name}time`)
    if (`${userLocation}` === 'null') {
      return 'null'
    }
    else {
      let userCoordinates = await axios.get(`https://geocode.search.hereapi.com/v1/geocode?q=${userLocation}&apiKey=${process.env['GEOCODING_KEY']}`)
      let userLatitude = userCoordinates.data.items[0].position.lat
      let userLongitude = userCoordinates.data.items[0].position.lng
      let userLocationAPI = userCoordinates.data.items[0].title

      let userWeather = await axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${userLatitude}&lon=${userLongitude}&units=metric&appid=${process.env['WEATHER_KEY']}`)
      let condition = userWeather.data.weather[0].main
      let icon = userWeather.data.weather[0].icon
      let description = userWeather.data.weather[0].description

      let userTempC = Math.round(userWeather.data.main.temp)
      let userTempF = Math.round(+userTempC * 1.8 + 32)
      let userFeelsLikeC = Math.round(userWeather.data.main.feels_like)
      let userFeelsLikeF = Math.round(+userFeelsLikeC * 1.8 + 32)

      let userWindKMH = Math.round(+userWeather.data.wind.speed * 3.6)
      let userWindMPH = Math.round(userWindKMH / 1.609)

      let userHumidity = userWeather.data.main.humidity

      let cloudCoverage = userWeather.data.clouds.all

      function getCondition(checkCondition) {
        switch (checkCondition) {
          case 'Clear':
            return 'with clear skies ☀️⛱️'
            break
          case 'Thunderstorm':
            return `with a ${description} ⛈️☔`
            break
          case 'Drizzle':
            return 'with slight rain 🌦️🌧️'
            break
          case 'Rain':
            return `with ${description} 🌧️☔`
            break
          case 'Snow':
            return `with ${description} 🌨️❄️`
            break
          case 'Clouds':
            return `with ${description} ☁️🌥️`
            break
          default:
            return `with a special weather event: ${condition} 📊🔍`
        }
      }

      let conditionString = getCondition(condition)

      var weatherDetails = {
        location: userLocationAPI,
        tempC: userTempC,
        feelsLikeC: userFeelsLikeC,
        tempF: userTempF,
        feelsLikeF: userFeelsLikeF,
        windKMH: userWindKMH,
        windMPH: userWindMPH,
        humidity: userHumidity,
        condition: conditionString,
        cloudCoverage: cloudCoverage
      }
      return weatherDetails
    }
  }

  async function getWeatherLocation(location) {
    let userCoordinates = await axios.get(`https://geocode.search.hereapi.com/v1/geocode?q=${location}&apiKey=${process.env['GEOCODING_KEY']}`)
    if (`${userCoordinates.data.items[0]}` === 'undefined') {
      client.me(channel, `${user} --> That wasn't a valid location!`)
    }
    let userLatitude = userCoordinates.data.items[0].position.lat
    let userLongitude = userCoordinates.data.items[0].position.lng
    let userLocationAPI = userCoordinates.data.items[0].title

    let userWeather = await axios.get(`http://api.openweathermap.org/data/2.5/weather?lat=${userLatitude}&lon=${userLongitude}&units=metric&appid=${process.env['WEATHER_KEY']}`)
    let condition = userWeather.data.weather[0].main
    let icon = userWeather.data.weather[0].icon
    let description = userWeather.data.weather[0].description

    let userTempC = Math.round(userWeather.data.main.temp)
    let userTempF = Math.round(+userTempC * 1.8 + 32)
    let userFeelsLikeC = Math.round(userWeather.data.main.feels_like)
    let userFeelsLikeF = Math.round(+userFeelsLikeC * 1.8 + 32)

    let userWindKMH = Math.round(+userWeather.data.wind.speed * 3.6)
    let userWindMPH = Math.round(userWindKMH / 1.609)

    let userHumidity = userWeather.data.main.humidity

    let cloudCoverage = userWeather.data.clouds.all

    function getCondition(checkCondition) {
      switch (checkCondition) {
        case 'Clear':
          return 'with clear skies ☀️⛱️'
          break
        case 'Thunderstorm':
          return `with a ${description} ⛈️☔`
          break
        case 'Drizzle':
          return 'with slight rain 🌦️🌧️'
          break
        case 'Rain':
          return `with ${description} 🌧️☔`
          break
        case 'Snow':
          return `with ${description} 🌨️❄️`
          break
        case 'Clouds':
          return `with ${description} ☁️🌥️`
          break
        default:
          return `with a special weather event: ${condition} 📊🔍`
      }
    }

    let conditionString = getCondition(condition)

    var weatherDetails = {
      location: userLocationAPI,
      tempC: userTempC,
      feelsLikeC: userFeelsLikeC,
      tempF: userTempF,
      feelsLikeF: userFeelsLikeF,
      windKMH: userWindKMH,
      windMPH: userWindMPH,
      humidity: userHumidity,
      condition: conditionString,
      cloudCoverage: cloudCoverage
    }
    return weatherDetails
  }

  if (command === 'weather') {
    let specificLocation = `${args.join(' ')}`
    if (`${args[0]}` === 'undefined') {
      getWeatherUser(userlow).then(function(value) {
        if (value === 'null') {
          client.me(channel, `${user} --> Before using this command, you must set your location with the !setlocation command. Example: “!setlocation lasalle ontario”, “!setlocation springfield virginia” or “!setlocation stockholm sweden”. More info: https://darkvypr.com/commands`)
        }
        else {
          client.me(channel, `${user} --> The weather in ${value.location} is currently ${value.tempC}°C (${value.tempF}°F) ${value.condition} Wind speed: ${value.windKMH} km/h (${value.windMPH} mp/h) 💨 Humidity: ${value.humidity}% 💧 Cloud Coverage: ${value.cloudCoverage}% ☁️`)
        }
      })
    }
    else if (`${specificLocation[0]}` === "@") {
      cleanedUpUser = specificLocation.replace('@', '').toLowerCase()
      getWeatherUser(cleanedUpUser).then(function(value) {
        if (value === 'null') {
          client.me(channel, `${user} --> That user hasn't set their location! Get them to set it and retry! PANIC`)
        }
        else {
          client.me(channel, `${user} --> The weather in ${cleanedUpUser}'s location (${value.location}) is currently ${value.tempC}°C (${value.tempF}°F) ${value.condition} Wind speed: ${value.windKMH} km/h (${value.windMPH} mp/h) 💨 Humidity: ${value.humidity}% 💧 Cloud Coverage: ${value.cloudCoverage}% ☁️`)
        }
      })
    }
    else {
      getWeatherLocation(specificLocation).then(function(value) {
        client.me(channel, `${user} --> The weather in ${value.location} is currently ${value.tempC}°C (${value.tempF}°F) ${value.condition} Wind speed: ${value.windKMH} km/h (${value.windMPH} mp/h) 💨 Humidity: ${value.humidity}% 💧 Cloud Coverage: ${value.cloudCoverage}% ☁️`)
      })
    }
  }

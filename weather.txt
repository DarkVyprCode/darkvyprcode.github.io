  async function getWeather(user, args) {
    var isUser
    var isSender
    var location
    if (args[0] == undefined) {
      let userLocation = await db.get(`${user}time`)
      isUser = true
      isSender = true
      location = userLocation
    }
    else if (args[0].startsWith('@')) {
      let userLocation = await db.get(`${args[0].toLowerCase().replace('@', '')}time`)
      isUser = true
      isSender = false
      location = userLocation
    }
    else {
      isUser = false
      location = encodeURIComponent(args.join(' '))
    }
    if (location == null && isSender) {
      return { success: false, case: 'sender_unsetlocation', reply: `Before using this command, you must set your location with the vb set location command. Example: “vb set location lasalle ontario”, “vb set location springfield virginia” or “vb set location stockholm sweden”. More info: https://darkvypr.com/commands` }
    }
    if (location == null && !isSender) {
      return { success: false, case: 'user_unsetlocation', reply: `That user hasn't set their location! Get them to set it and retry! Hint: "vb set location"` }
    }
    let coordinates = await axios.get(`https://geocode.search.hereapi.com/v1/geocode?q=${location}&apiKey=${process.env['GEOCODING_KEY']}`)
    if (coordinates.data.items[0] == undefined) {
      return { success: false, case: 'invalid_locaiton', reply: `The location provided to the API was invalid.` }
    }
    var [latitude, longitude, location] = [coordinates.data.items[0].position.lat, coordinates.data.items[0].position.lng, coordinates.data.items[0].title]
    let weather = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=hourly,daily&units=metric&appid=${process.env['WEATHER_KEY']}`)
    let [condition, icon, description] = [weather.data.current.weather[0].main, weather.data.current.weather[0].icon, weather.data.current.weather[0].description]
    let [celcius, fahrenheit] = [(+weather.data.current.temp).toFixed(1), (+weather.data.current.temp * 1.8 + 32).toFixed(1)]
    let [windSpeed, windGust] = [(+weather.data.current.wind_speed * 3.6).toFixed(1), (+weather.data.current.wind_gust * 3.6).toFixed(1)]
    let [humidity, clouds, alerts] = [+weather.data.current.humidity, +weather.data.current.clouds, weather.data.alerts]
    let [sunrise, sunset, currentTime] = [new Date(+weather.data.current.sunrise * 1000).addHours(-5).toISOString(), new Date(+weather.data.current.sunset * 1000).addHours(-5).toISOString(), new Date().addHours(-5).toISOString()]
    let [rain, snow] = [weather.data.current.rain, weather.data.current.snow]
    let weatherAlert = () => {
      switch (alerts) {
        case undefined:
          return 'None'
          break
        default:
          return weather.data.alerts[0].event + '.⚠️'
      }
    }
    let precipitation = () => {
      if (rain == undefined && snow == undefined) {
        return ''
      }
      else if (rain !== undefined && snow == undefined) {
        return `It's raining at a rate of ${rain['1h']} mm/hr. ☔🌧️`
      }
      else {
        return `It's snowing at a rate of ${snow['1h']} mm/hr. ☔🌧️`
      }
    }
    let windGusts = () => {
      switch (windGust) {
        case 'NaN':
          return 'No wind gust data. 💨'
          break
        default:
          return `with wind gusts of up to ${windGust} km/h. 💨`
      }
    }
    let conditionString = () => {
      switch (condition) {
        case 'Clear':
          return 'with clear skies. ☀️⛱️'
          break
        case 'Thunderstorm':
          return `with a ${description}. ⛈️☔`
          break
        case 'Drizzle':
          return 'with slight rain. 🌦️🌧️'
          break
        case 'Rain':
          return `with ${description}. 🌧️☔`
          break
        case 'Snow':
          return `with ${description}. 🌨️❄️`
          break
        case 'Clouds':
          return `with ${description}. ☁️🌥️`
          break
        default:
          return `with a special weather event: ${condition}. 📊🔍`
      }
    }
    let sunState = () => {
      if (new Date(sunrise) > new Date(currentTime)) {
        let sunriseIn = humanizeDuration(new Date(sunrise) - new Date(currentTime), { units: ["h", "m"], round: true, delimiter: " and " })
        return `Sun rises in ${sunriseIn}. 🌅`
      }
      else {
        let sunsetIn = humanizeDuration(new Date(sunset) - new Date(currentTime), { units: ["h", "m"], round: true, delimiter: " and " })
        return `Sun sets in ${sunsetIn}. 🌇`
      }
    }
    let weatherObj = {
      success: true,
      location: location,
      temp: { c: celcius + '°C', f: fahrenheit + '°F' },
      precipitation: precipitation(),
  wind: { speed: windSpeed + ' km/h', gust: windGusts() },
      sun: sunState(),
      humidity: humidity + '% 💧',
      condition: conditionString(),
      clouds: clouds + '% ☁️',
      weatherAlert: weatherAlert()
    }
    if (isSender) {
      return {
        weatherObj,
        reply: `The temperature in ${weatherObj.location} is ${weatherObj.temp.c} (${weatherObj.temp.f}) ${weatherObj.condition} ${weatherObj.precipitation} The wind speed is ${weatherObj.wind.speed}, ${weatherObj.wind.gust} ${weatherObj.sun} Humidity: ${weatherObj.humidity} Cloud Coverage: ${weatherObj.clouds} Alert: ${weatherObj.weatherAlert}`
      }
    }
    else if (!isSender && isUser) {
      return {
        weatherObj,
        reply: `The temperature in ${args[0]}'s location (${weatherObj.location}) is ${weatherObj.temp.c} (${weatherObj.temp.f}) ${weatherObj.condition} ${weatherObj.precipitation} The wind speed is ${weatherObj.wind.speed}, ${weatherObj.wind.gust} ${weatherObj.sun} Humidity: ${weatherObj.humidity} Cloud Coverage: ${weatherObj.clouds} Alert: ${weatherObj.weatherAlert}`
      }
    }
    else {
      return {
        weatherObj,
        reply: `The temperature in ${weatherObj.location} is ${weatherObj.temp.c} (${weatherObj.temp.f}) ${weatherObj.condition} ${weatherObj.precipitation} The wind speed is ${weatherObj.wind.speed}, ${weatherObj.wind.gust} ${weatherObj.sun} Humidity: ${weatherObj.humidity} Cloud Coverage: ${weatherObj.clouds} Alert: ${weatherObj.weatherAlert}`
      }
    }
  }

  if (command === 'weather') {
    getWeather(userlow, args).then(weather => {
      client.me(channel, `${user} --> ${weather.reply}`)
    })
  }

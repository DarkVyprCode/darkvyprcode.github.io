  async function getUserTime(user, args) {
    var isUser
    var isSender
    var location
    if (args[0] == undefined) {
      let userLocation = await db.get(`${user}time`)
      isUser = true
      isSender = true
      location = userLocation
    }
    else if (args[0].startsWith('@')) {
      let userLocation = await db.get(`${args[0].toLowerCase().replace('@', '')}time`)
      isUser = true
      isSender = false
      location = userLocation
    }
    else {
      isUser = false
      location = encodeURIComponent(args.join(' '))
    }
    if (location == null && isSender) {
      return { success: false, case: 'sender_unsetlocation', reply: `Before using this command, you must set your location with the vb set location command. Example: “vb set location lasalle ontario”, “vb set location springfield virginia” or “vb set location stockholm sweden”. More info: https://darkvypr.com/commands` }
    }
    if (location == null && !isSender) {
      return { success: false, case: 'user_unsetlocation', reply: `That user hasn't set their location! Get them to set it and retry! Hint: "vb set location"` }
    }
    let time = await axios.get(`https://timezone.abstractapi.com/v1/current_time/?api_key=${process.env['TIME_KEY']}&location=${location}`)
    if (time.data.datetime == undefined) {
      return { success: false, case: 'invalid_locaiton', reply: `The location provided to the API was invalid.` }
    }
    let dateTime = time.data.datetime
    let [timezone, yearMonthDay] = [time.data.timezone_abbreviation, new Date(dateTime.slice(0, 10))]
    var currentTime = {
      date: dateFormat(yearMonthDay, "fullDate"),
      time: dateFormat(dateTime, "h:MM:ss TT"),
      timezone: timezone,
      location: capitalizeEachWord(decodeURIComponent(location))
    }
    if (isSender) {
      return {
        currentTime,
        reply: `In ${currentTime.location} (${currentTime.timezone}) It's currently ${currentTime.time}, ⌚ and the date is ${currentTime.date}.📅`
      }
    }
    else if (!isSender && isUser) {
      return {
        currentTime,
        reply: `At ${args[0].toLowerCase()}'s current location (${currentTime.location}, ${currentTime.timezone}) It's currently ${currentTime.time}, ⌚ and the date is ${currentTime.date}.📅`
      }
    }
    else {
      return {
        currentTime,
        reply: `In ${currentTime.location} (${currentTime.timezone}) It's currently ${currentTime.time}, ⌚ and the date is ${currentTime.date}.📅`
      }
    }
  }

  if (command === 'time') {
    getUserTime(userlow, args).then(time => {
      client.me(channel, `${user} --> ${time.reply}`)
    })
  }

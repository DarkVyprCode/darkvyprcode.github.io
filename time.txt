  async function getUserTime(user, args) {
    var isUser
    var isSender
    var location
    if (args[0] == undefined) {
      let userLocation = await db.get(`${user}time`)
      isUser = true
      isSender = true
      location = userLocation
    }
    else if (args[0].startsWith('@')) {
      let userLocation = await db.get(`${args[0].toLowerCase().replace('@', '')}time`)
      isUser = true
      isSender = false
      location = userLocation
    }
    else {
      isUser = false
      location = encodeURIComponent(args.join(' '))
    }
    if (location == null && isSender) {
      return { success: false, case: 'sender_unsetlocation', reply: `Before using this command, you must set your location with the vb set location command. Example: “vb set location lasalle ontario”, “vb set location springfield virginia” or “vb set location stockholm sweden”. More info: https://darkvypr.com/commands` }
    }
    if (location == null && !isSender) {
      return { success: false, case: 'user_unsetlocation', reply: `That user hasn't set their location! Get them to set it and retry! Hint: "vb set location"` }
    }
    let coordinates = await axios.get(`https://geocode.search.hereapi.com/v1/geocode?q=${location}&apiKey=${process.env['GEOCODING_KEY']}`)
    if (coordinates.data.items[0] == undefined) {
      return { success: false, case: 'invalid_locaiton', reply: `The location provided to the API was invalid.` }
    }
    var [latitude, longitude, location] = [coordinates.data.items[0].position.lat, coordinates.data.items[0].position.lng, coordinates.data.items[0].title]
    let time = await axios.get(`https://api.bigdatacloud.net/data/timezone-by-location?latitude=${latitude}&longitude=${longitude}&key=${process.env['TIME_KEY']}`)
    let [dateTime, timeZone, utcOffset, fullTimeZone] = [new Date(time.data.localTime).toISOString(), time.data.effectiveTimeZoneShort, time.data.utcOffset, time.data.displayName]
    var currentTime = {
      date: dateFormat(dateTime, "fullDate"),
      time: dateFormat(dateTime, "h:MM:ss TT"),
    }
    if (isSender) {
      return {
        currentTime,
        reply: `${location} is in ${fullTimeZone}. It's currently ${currentTime.time}, ⌚ and the date is ${currentTime.date}.📅`
      }
    }
    else if (!isSender && isUser) {
      return {
        currentTime,
        reply: `${args[0].toLowerCase()} is in ${fullTimeZone} (${location}). It's currently ${currentTime.time}, ⌚ and the date is ${currentTime.date}.📅`
      }
    }
    else {
      return {
        currentTime,
        reply: `${location} is in ${timeZone}. It's currently ${currentTime.time}, ⌚ and the date is ${currentTime.date}.📅`
      }
    }
  }

  if (command === 'time') {
    getUserTime(userlow, args).then(time => {
      client.me(channel, `${user} --> ${time.reply}`)
    })
  }
